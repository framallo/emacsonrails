;; Object emacsonrails/
;; SEMANTICDB Tags save file
(semanticdb-project-database-file "emacsonrails/"
  :tables (list 
   (semanticdb-table "emacsonrails-loader.el"
    :major-mode 'emacs-lisp-mode
    :tags '(("setq" code nil nil [70 129]) ("setq" code nil nil [131 195]) ("inf-ruby" include nil nil [196 215]) ("ruby-electric" include nil nil [216 240]) ("setq" code nil nil [242 307]) ("rails" include nil nil [308 324]) ("load-file" code nil nil [367 426]) ("semantic-load-enable-code-helpers" code nil nil [756 791]) ("add-to-list" code nil nil [1316 1370]) ("ecb" include nil nil [1371 1385]) ("add-to-list" code nil nil [1536 1594]) ("icicles" include nil nil [1595 1613]) ("find-recursive" include nil nil [1689 1714]) ("pastie" include nil nil [1716 1733]) ("setq" code nil nil [1735 1806]) ("color-theme" include nil nil [1807 1829]) ("setq" code nil nil [1850 1932]) ("vc-git" include nil nil [1934 1951]) ("when" code nil nil [1953 2018]) ("git" include nil nil [2020 2034]) ("git-blame-mode" function (:prototype-flag t :user-visible-flag t) nil [2036 2131]))
    :file "emacsonrails-loader.el"
    :pointmax 2132
    :unmatched-syntax 'nil
    )
   (semanticdb-table ".emacs"
    :major-mode 'emacs-lisp-mode
    :tags '(("setq" code nil nil [1 48]) ("setq" code nil nil [49 100]) ("setq" code nil nil [103 155]) ("rails" include nil nil [156 172]) ("setq" code nil nil [174 233]) ("color-theme" include nil nil [234 256]) ("setq" code nil nil [258 312]) ("icicles" include nil nil [313 331]) ("lacarte" include nil nil [332 350]) ("setq" code nil nil [387 417]) ("setq" code nil nil [475 509]))
    :file ".emacs"
    :pointmax 589
    )
   (semanticdb-table "snippet.el"
    :major-mode 'emacs-lisp-mode
    :tags '(("cl" include nil nil [10050 10063]) ("defgroup" code nil nil [10065 10218]) ("snippet-bound-face" variable (:user-visible-flag t :default-value (quote bold)) nil [10220 10332]) ("snippet-field-face" variable (:user-visible-flag t :default-value (quote highlight)) nil [10334 10454]) ("snippet-field-identifier" variable (:user-visible-flag t :default-value "$$") nil [10456 10580]) ("snippet-exit-identifier" variable (:user-visible-flag t :default-value "$.") nil [10582 10716]) ("snippet-field-default-beg-char" variable (:user-visible-flag t :default-value 123) nil [10718 10870]) ("snippet-field-default-end-char" variable (:user-visible-flag t :default-value 125) nil [10872 11023]) ("snippet-indent" variable (:user-visible-flag t :default-value "$>") nil [11025 11153]) ("snippet-line-terminator" variable (:user-visible-flag t :default-value "
") nil [11155 11297]) ("snippet-map" variable (:default-value (make-sparse-keymap)) nil [11299 11401]) ("define-key" code nil nil [11427 11495]) ("define-key" code nil nil [11496 11564]) ("define-key" code nil nil [11565 11633]) ("snippet" type (:members ("bound" "fields" "exit-marker") :type "struct") nil [11635 12320]) ("snippet" variable nil nil [12322 12455]) ("make-variable-buffer-local" code nil nil [12457 12494]) ("snippet-make-bound-overlay" function nil nil [12496 13040]) ("snippet-make-field-overlay" function (:arguments ("&optional" "name")) nil [13042 13928]) ("snippet-fields-with-name" function (:arguments ("name")) nil [13930 14154]) ("snippet-bound-modified" function (:arguments ("bound" "after" "beg" "end" "&optional" "change")) nil [14156 14604]) ("snippet-field-insert" function (:arguments ("field" "after" "beg" "end" "&optional" "change")) nil [14606 15071]) ("snippet-field-modified" function (:arguments ("field" "after" "beg" "end" "&optional" "change")) nil [15073 15698]) ("snippet-field-update" function (:arguments ("field" "after" "beg" "end" "&optional" "change")) nil [15700 16477]) ("snippet-exit-snippet" function nil nil [16479 16785]) ("snippet-next-field" function (:user-visible-flag t) nil [16787 17478]) ("snippet-prev-field" function (:user-visible-flag t) nil [17480 18195]) ("snippet-cleanup" function nil nil [18197 18538]) ("snippet-field-regexp" function nil nil [18540 18993]) ("snippet-split-string" function (:arguments ("string" "&optional" "separators" "include-separators-p")) nil [18995 19708]) ("snippet-split-regexp" function nil nil [19710 19911]) ("snippet-insert" function (:user-visible-flag t :arguments ("template")) nil [19913 24120]) ("snippet-strip-abbrev-table-suffix" function (:arguments ("str")) nil [24122 24317]) ("snippet-make-abbrev-expansion-hook" function (:arguments ("abbrev-table" "abbrev-name" "template")) nil [24319 25319]) ("snippet-abbrev" function (:arguments ("abbrev-table" "abbrev-name" "template")) nil [25321 26190]) ("snippet-with-abbrev-table" function (:arguments ("abbrev-table" "&rest" "snippet-alist")) nil [26192 26844]) ("snippet" package nil nil [26846 26864]))
    :file "snippet.el"
    :pointmax 26865
    )
   (semanticdb-table "find-recursive.el"
    :major-mode 'emacs-lisp-mode
    :tags '(("cl" include nil nil [1032 1045]) ("find-recursive-exclude-files" variable (:default-value (quote (".*.class$" ".*~$" ".*.elc$"))) nil [1047 1259]) ("find-file-recursively" function (:arguments ("file-regexp" "directory")) nil [1261 2138]) ("find-recursive-directory-relative-files" function (:arguments ("directory" "relative-directory" "file-regexp")) nil [2140 2900]) ("find-recursive-filter-out" function (:arguments ("remove-list" "list")) nil [2902 3358]) ("find-recursive-running-xemacs" variable (:default-value (string-match "XEmacs\\|Lucid" emacs-version)) nil [3360 3444]) ("if" code nil nil [3446 4578]) ("global-set-key" code nil nil [4580 4642]) ("find-recursive" package nil nil [4644 4669]))
    :file "find-recursive.el"
    :pointmax 4670
    )
   )
  :file "semantic.cache"
  :semantic-tag-version "2.0pre4"
  :semanticdb-version "2.0pre4"
  )
